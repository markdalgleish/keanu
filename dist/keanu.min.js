"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function spawn(e,t,r){var s=new _process2.default(e,t,r);return xs[s.pid]=s,s.pid}function send(e,t){if(null==xs[e])throw new Error("Tried to send "+JSON.stringify(t)+" to a process that doesnt exist");return xs[e].send(t)}function test_pid(){return spawn({receive:function(e,t){return e}})}function s(e){return JSON.stringify(e)}function assert_receive(e,t){var r=t,n=xs[e].state;if(!_lodashLangIsEqual2.default(r,n))throw new Error("assert_receive: expected: "+s(r)+", got: "+s(n));return!0}function kill(){var e=!0,t=!1,r=void 0;try{for(var s=arguments.length,n=Array(s),a=0;s>a;a++)n[a]=arguments[a];for(var i,o=n[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var u=i.value;delete xs[u]}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.spawn=spawn,exports.send=send,exports.test_pid=test_pid,exports.assert_receive=assert_receive,exports.kill=kill;var _lodashLangIsEqual=require("lodash/lang/isEqual"),_lodashLangIsEqual2=_interopRequireDefault(_lodashLangIsEqual),_process=require("./process"),_process2=_interopRequireDefault(_process),xs={};Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,r,s){return r&&e(t.prototype,r),s&&e(t,s),t}}(),PS=function(){function e(t){var r=arguments.length<=1||void 0===arguments[1]?"receive":arguments[1],s=arguments.length<=2||void 0===arguments[2]?[]:arguments[2];_classCallCheck(this,e),this.pid=Symbol(),this.receiver=t[r].bind(t),this.state=s}return _createClass(e,[{key:"send",value:function(e){this.state=this.receiver(e,this.state,this.pid)}}]),e}();exports.default=PS,module.exports=exports.default;